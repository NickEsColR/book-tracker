---
import type { Book, LectureBook } from "@/types/OpenLibraryTypes";

interface Props {
  book: LectureBook | Book;
  listId?: string;
}

const { book, listId } = Astro.props;
// check if book is a LectureBook or Book
const getIsLectureBook = (book: Book | LectureBook): book is LectureBook => {
  return (book as LectureBook).lectureBookId !== undefined;
};
const isLectureBook = getIsLectureBook(book);
---

<button
  class:list={[
    "absolute top-0 right-0 z-10 -mt-1 cursor-pointer transition-opacity duration-300 ease-in-out",
    {
      "opacity-50 hover:opacity-100 focus:opacity-100": !isLectureBook,
      "opacity-100 hover:opacity-50 focus:opacity-50": isLectureBook,
    },
  ]}
  aria-label="Bookmark this book"
  data-book={JSON.stringify(book)}
  data-list-id={listId}
  id="bookmark-btn"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="48"
    height="48"
    viewBox="0 0 24 24"
    fill="currentColor"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="text-neutral-500 drop-shadow-md"
  >
    <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"></path>
  </svg>
</button>

<!-- open the list dialog -->
<script>
  import { openDialog } from "@/store/listsDialog.store";

  const bookmarkBtn = document.querySelector("#bookmark-btn") as HTMLButtonElement;

  if (bookmarkBtn) {
    bookmarkBtn.addEventListener("click", (e: MouseEvent) => {
      e.stopPropagation();
      e.preventDefault();
      openDialog();
    });
  }
