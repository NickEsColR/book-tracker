---
import type { Book } from "@/types/OpenLibraryTypes";

interface Props {
  book: Book;
  canOpenDialog?: boolean;
}

const { book, canOpenDialog } = Astro.props;

// Validations and default values
const displayTitle = book.title || "TÃ­tulo no disponible";
const displayAuthors =
  book.author_name && book.author_name.length > 0
    ? book.author_name
    : ["Autor desconocido"];

const imageUrl = book.cover_i
  ? `https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg`
  : null;
---

<div
  class:list={[
    "flex relative w-full aspect-[9/16] border border-gray-700 rounded overflow-hidden cursor-pointer group hover:scale-105 focus:scale-105 transition-transform duration-300 ease-in-out",
    { openDialog: canOpenDialog },
  ]}
  tabindex="0"
  role="button"
  aria-label={`Book: ${displayTitle} by ${displayAuthors.join(", ")}`}
>
  {/* Bookmark Icon */}
  <button
    class="absolute top-0 right-0 z-10 -mt-1 cursor-pointer opacity-50 hover:opacity-100 focus:opacity-100 transition-opacity duration-300 ease-in-out"
    aria-label="Bookmark this book"
    data-book={JSON.stringify(book)}
    id="bookmark-btn"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="48"
      height="48"
      viewBox="0 0 24 24"
      fill="currentColor"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="text-neutral-500 drop-shadow-md"
    >
      <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z"></path>
    </svg>
  </button>

  <div
    class="absolute bottom-0 left-0 z-10 w-full bg-blue-800 opacity-0 group-hover:opacity-100 group-focus:opacity-100 transition-opacity duration-300 ease-in-out p-2"
  >
    <h3 class="text-sm font-semibold mb-1 text-balance line-clamp-3 text-white">
      {displayTitle}
    </h3>
    <p class="text-xs text-gray-300 truncate">{displayAuthors.join(", ")}</p>
  </div>

  {
    imageUrl ? (
      <img
        alt={displayTitle}
        class="absolute inset-0 w-full h-full object-fill object-center"
        src={imageUrl}
      />
    ) : (
      <div class="flex flex-col items-center justify-center h-full w-full p-4 text-center bg-gray-800 bg-opacity-40">
        <h3 class="text-sm font-bold text-white leading-tight">
          {displayTitle}
        </h3>
        <div class="mt-1 text-xs text-gray-300">
          {displayAuthors.map((author) => (
            <p>{author}</p>
          ))}
        </div>
      </div>
    )
  }
</div>

<script>
  const bookmarkBtns = Array.from(document.querySelectorAll("#bookmark-btn")) as HTMLButtonElement[];
  bookmarkBtns.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.stopPropagation();
      const bookData = JSON.parse((e.currentTarget as HTMLButtonElement).dataset.book || "{}");
      fetch("/api/lectureList.json", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(bookData),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Error al guardar el libro");
          }
          return response.json();
        })
        .then((data) => {
          console.log("Libro guardado:", data);
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    });
  });
</script>
