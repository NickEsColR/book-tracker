---

---

<div
  id="dialog"
  class="fixed inset-0 z-40 min-h-full overflow-y-auto overflow-x-hidden transition flex items-center"
>
  <!-- overlay -->
  <div
    aria-hidden="true"
    class="fixed inset-0 w-full h-full bg-black/50 cursor-pointer"
    id="overlay-dialog"
  >
  </div>

  <!-- Modal -->
  <div
    class="relative w-full cursor-pointer pointer-events-none transition my-auto p-4"
  >
    <div
      class="w-full max-w-lg py-2 bg-white cursor-default pointer-events-auto dark:bg-gray-800 relative rounded-xl mx-auto"
    >
      <button
        type="button"
        class="absolute top-2 right-2 rtl:right-auto rtl:left-2"
        id="close-btn"
      >
        <svg
          x-link-title="Close"
          class="h-4 w-4 hover:rotate-180 transition-all ease-in-out duration-500 cursor-pointer text-gray-400"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fillR-rule="evenodd"
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
        </svg>
        <span class="sr-only"> Close </span>
      </button>

      <div class="space-y-2 p-2" id="book-details">
        <div class="flex flex-col md:flex-row p-2 gap-4 items-center dark:text-white">
          <div class="flex-shrink-0">
            <img id="book-cover" src="" alt="Book cover" class="w-32 h-auto object-cover rounded shadow-md" />
          </div>
          <div class="space-y-2 text-center md:text-left flex-1">
            <h2 class="text-xl font-bold tracking-tight" id="book-title">
              Book Title
            </h2>
            <p class="text-indigo-500" id="authors">Authors</p>
          </div>
        </div>
      </div>

      <div class="space-y-2" id="lecture-book-details">
        <div aria-hidden="true" class="border-t border-gray-700 px-2"></div>

        <form novalidate class="space-y-4 p-4">
          <div class="flex gap-4 items-center justify-between">
            <label for="page" class="text-gray-400 text-lg">
              Página actual
            </label>
            <input
              id="page"
              class="border px-3 shadow-md border-gray-700 placeholder:text-base focus:outline-none ease-in-out duration-300 rounded-lg max-w-3xs"
              type="number"
              placeholder="0"
              required
            />
          </div>
          
          <div class="flex gap-4 items-center justify-between">
            <label for="reading-status" class="text-gray-400 text-lg">
              Estado de lectura
            </label>
            <select 
              id="reading-status" 
              class="border px-3 py-2 shadow-md border-gray-700 focus:outline-none ease-in-out duration-300 rounded-lg"
            >
              <option value="pending">Pendiente</option>
              <option value="reading">Leyendo</option>
              <option value="completed">Leído</option>
            </select>
          </div>
          
          <div class="flex gap-4 items-center justify-between">
            <label for="liked" class="text-gray-400 text-lg">
              Me gusta
            </label>
            <input
              id="liked"
              type="checkbox"
              class="w-5 h-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
            />
          </div>
          
          <div class="space-y-2">
            <label for="main-note" class="block text-gray-400 text-lg">
              Nota principal
            </label>
            <textarea
              id="main-note"
              rows="3"
              class="w-full border px-3 py-2 shadow-md border-gray-700 placeholder:text-base focus:outline-none ease-in-out duration-300 rounded-lg"
              placeholder="Escribe una nota sobre este libro..."
            ></textarea>
          </div>
          
          <div aria-hidden="true" class="border-b border-gray-700"></div>
          
          <div class="grid gap-2 grid-cols-[repeat(auto-fit,minmax(0,1fr))]">
            <button
              type="submit"
              class="inline-flex items-center justify-center py-1 gap-1 font-medium rounded-lg border transition-colors outline-none focus:ring-offset-2 focus:ring-2 focus:ring-inset dark:focus:ring-offset-0 min-h-[2.25rem] px-4 text-sm text-gray-800 bg-white border-gray-300 hover:bg-gray-50 focus:ring-primary-600 focus:text-primary-600 focus:bg-primary-50 focus:border-primary-600 dark:bg-gray-800 dark:hover:bg-gray-700 dark:border-gray-600 dark:hover:border-gray-500 dark:text-gray-200 dark:focus:text-primary-400 dark:focus:border-primary-400 dark:focus:bg-gray-800"
            >
              Actualizar
            </button>

            <button
              type="button"
              class="inline-flex items-center justify-center py-1 gap-1 font-medium rounded-lg border transition-colors outline-none focus:ring-offset-2 focus:ring-2 focus:ring-inset dark:focus:ring-offset-0 min-h-[2.25rem] px-4 text-sm text-white shadow focus:ring-white border-transparent bg-red-500 hover:bg-red-400"
            >
              <span class="flex items-center gap-1"> Eliminar </span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- handle open and close dialog -->
<script>
  import { bookData, isOpen } from "@/store/bookDialog.store";

  const dialog = document.querySelector("#dialog") as HTMLDivElement;
  const title = document.querySelector("#book-title") as HTMLHeadingElement;
  const authors = document.querySelector("#authors") as HTMLParagraphElement;
  const coverImg = document.querySelector("#book-cover") as HTMLImageElement;

  const closeBtn = document.querySelector("#close-btn") as HTMLButtonElement;
  const overlay = document.querySelector("#overlay-dialog") as HTMLDivElement;

  const inputPage = document.querySelector("#page") as HTMLInputElement;
  const selectStatus = document.querySelector("#reading-status") as HTMLSelectElement;
  const checkboxLiked = document.querySelector("#liked") as HTMLInputElement;
  const textareaNote = document.querySelector("#main-note") as HTMLTextAreaElement;

  // Listen to changes in the store, and show/hide the dialog accordingly
  isOpen.subscribe((open) => {
    if (open) {
      dialog.style.display = "block";
      const book = bookData.get();
      if (!book) return;
      
      // Update book details
      title.textContent = book.title || 'Unknown Title';
      authors.textContent = book.author_name?.join(", ") || 'Unknown Author';
      
      // Set cover image
      if (book.cover_i) {
        coverImg.src = `https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg`;
        coverImg.alt = `Cover for ${book.title}`;
      } else {
        coverImg.src = "/placeholder-book-cover.jpg";
        coverImg.alt = `Cover for ${book.title}`;
      }
      
      // Set form values
      inputPage.value = `${book.currentPage || 0}`;
      selectStatus.value = book.readingStatus || 'pending';
      checkboxLiked.checked = book.liked || false;
      textareaNote.value = book.mainNote || '';
      
    } else {
      dialog.style.display = "none";
    }
  });

  //close dialog
  const closeModal = () => {
    isOpen.set(false);
  };

  closeBtn.addEventListener("click", closeModal);
  overlay.addEventListener("click", closeModal);
</script>

<!-- handle form submission to update lecture details -->
<script>
  import { bookData, isOpen } from "@/store/bookDialog.store";

  const form = document.querySelector("form") as HTMLFormElement;
  const inputPage = document.querySelector("#page") as HTMLInputElement;
  const selectStatus = document.querySelector("#reading-status") as HTMLSelectElement;
  const checkboxLiked = document.querySelector("#liked") as HTMLInputElement;
  const textareaNote = document.querySelector("#main-note") as HTMLTextAreaElement;
  const removeBtn = document.querySelector(
    "button:last-child"
  ) as HTMLButtonElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const book = bookData.get();
    if (!book) return;
    
    // Update book with form values
    book.currentPage = +inputPage.value;
    book.readingStatus = selectStatus.value as 'pending' | 'reading' | 'completed';
    book.liked = checkboxLiked.checked;
    book.mainNote = textareaNote.value;

    try {
      // First update the book on the server if it has a lectureBookId
      if (book.lectureBookId) {
        const response = await fetch(`/api/lecture-book/${book.lectureBookId}.json`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            currentPage: book.currentPage,
            readingStatus: book.readingStatus,
            liked: book.liked,
            mainNote: book.mainNote
          }),
        });

        if (!response.ok) {
          console.error('Failed to update book on server:', await response.json());
        }
      }
      
      // close modal
      isOpen.set(false);
      // reload the page or update the UI to reflect changes
      window.location.reload();
    } catch (error) {
      console.error('Error updating book:', error);
      // You could add error handling UI here
    }
  });
</script>
