---
import GridBooks from "@/components/books/GridBooks.astro";
import Layout from "@/layouts/Layout.astro";
import Input from "@/components/ui/input.astro";

import { getBooks } from "@/utils/booksApi";
import { MAIN_SUBJECTS } from "@/consts/subjects";

const LIMIT = 24; //24 * n

const { request } = Astro;
const { searchParams } = new URL(request.url);
const titleQuery = searchParams.get("title");
const genresQuery = searchParams.get("genre");
const authorQuery = searchParams.get("author");
const page = searchParams.get("page") || 1;
const currentPage = parseInt(page as string, 10) || 1;

const offset = (currentPage - 1) * LIMIT;

const { docs: books,num_found } = await getBooks(titleQuery, authorQuery, genresQuery, offset, LIMIT);

const ITEMS_PER_PAGE = books.length;
const genres = MAIN_SUBJECTS;
const totalPages = Math.ceil(num_found / ITEMS_PER_PAGE);

const buildPageUrl = (pageNumber: number) => {
  const newParams = new URLSearchParams(searchParams);
  if (pageNumber <= 1) {
    newParams.delete("page"); // Cleaner URL for page 1
  } else {
    newParams.set("page", pageNumber.toString());
  }
  return `${Astro.url.pathname}?${newParams.toString()}`;
};
---

<Layout>
  <div class="container mx-auto py-8">
    <section class="col-span-2">
      <GridBooks books={books}>
        <div
          class="flex flex-col text-center w-full mb-10 col-span-full"
          slot="header"
        >
          <h2
            class="sm:text-3xl text-2xl font-medium title-font mb-4 text-white"
          >
            Filtrar Libros
          </h2>
          <span class="lg:w-2/3 mx-auto leading-relaxed text-base">
            <span id="number-available" class="font-semibold"
              >{num_found}</span
            > Libros Encontrados
          </span>

          <form class="grid md:grid-cols-3 gap-4 mt-8 items-center">
              <Input
                type="text"
                id="title"
                name="title"
                label="Filtrar por título"
                placeholder="Filtrar por título"
                value={titleQuery ?? ""}
                className="bg-gray-900"
              />
              <Input
                type="text"
                id="author"
                name="author"
                label="Filtrar por autor"
                placeholder="Filtrar por autor"
                value={authorQuery ?? ""}
                className="bg-gray-900"
              />
            <div class="h-10">
              <label for="genre" hidden>Filtrar por género</label>
              <select
                class="bg-gray-900 bg-opacity-40 rounded-lg ring-2 ring-gray-500 text-base outline-none text-white py-1 px-3 w-full h-full xl:flex-1 focus:ring-blue-50 "
                name="genre"
                id="genre"
              >
                <option value="all">Filtrar por género</option>
                {
                  genres.map(({id,es}) => (
                    <option value={id} selected={id == genresQuery}>
                      {es}
                    </option>
                  ))
                }
              </select>
            </div>
          </form>
        </div>
      </GridBooks>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div class="flex justify-center items-center space-x-4 mt-8">
          {currentPage > 1 && (
            <a
              href={buildPageUrl(currentPage - 1)}
              class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded text-white no-underline"
            >
              Anterior
            </a>
          )}
          <span class="text-white">
            Página {currentPage} de {totalPages}
          </span>
          {currentPage < totalPages && (
            <a
              href={buildPageUrl(currentPage + 1)}
              class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded text-white no-underline"
            >
              Siguiente
            </a>
          )}
        </div>
      )}
    </section>
  </div>
</Layout>

<script>
  const genreInput = document.querySelector("#genre") as HTMLSelectElement;
  const titleInput = document.querySelector("#title") as HTMLInputElement;
  const authorInput = document.querySelector("#author") as HTMLInputElement;

  function updateUrlParams() {
    const url = new URL(window.location.href);
    if (titleInput.value) {
      url.searchParams.set("title", titleInput.value);
    } else {
      url.searchParams.delete("title");
    }
    if (authorInput.value) {
      url.searchParams.set("author", authorInput.value);
    } else {
      url.searchParams.delete("author");
    }
    if (genreInput.value && genreInput.value !== "all") {
      url.searchParams.set("genre", genreInput.value);
    } else {
      url.searchParams.delete("genre");
    }
    // Reset to page 1 when filters change
    url.searchParams.delete("page");
    window.location.href = url.toString();
  }

  genreInput.addEventListener("change", updateUrlParams);
  titleInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      updateUrlParams();
    }
  });
  authorInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      updateUrlParams();
    }
  });
</script>
