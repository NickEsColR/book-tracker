---
import Layout from "@/layouts/Layout.astro";
import ListsLayout from "@/layouts/ListsLayout.astro";
import GridBooks from "@/components/GridBooks.astro";
import {
  db,
  eq,
  LectureLists,
  LectureListBooks,
} from "astro:db";
import { fetchLectureListBooksWithDetails } from "@/utils/lectureListUtils";
import type { LectureBook } from "@/types/OpenLibraryTypes";
import type { LectureLists as LectureListInterface } from "@/types/db.types";

// Get the current user's ID from auth
const { userId } = await Astro.locals.auth();
const { listId } = Astro.params;

// Redirect to login if not authenticated
if (!userId) {
  return Astro.redirect("/lecture-lists/my-lists");
}

let list: LectureListInterface | null = null;
let books: LectureBook[] = [];
let error: string | null = null;

try {
  // Get the lecture list
  const lectureList = await db
    .select()
    .from(LectureLists)
    .where(eq(LectureLists.listId, listId as string));

  // Verify the list exists
  if (!lectureList || lectureList.length === 0) {
    return Astro.redirect("/lecture-lists/my-lists");
  }

  list = lectureList[0] as LectureListInterface;

  // Verify the list belongs to the current user
  if (list.userId !== userId) {
    return Astro.redirect("/lecture-lists/my-lists");
  }

  // Get book IDs in this list
  const lectureListBooks = await db
    .select()
    .from(LectureListBooks)
    .where(eq(LectureListBooks.listId, listId as string));

  // Get the books if there are any in the list
  if (lectureListBooks && lectureListBooks.length > 0) {
    const lectureBookIds = lectureListBooks.map((item) => item.lectureBookId);

    // Fetch books with their lecture book IDs, reading status, and notes
    books = await fetchLectureListBooksWithDetails(lectureBookIds);
  }
} catch (err) {
  console.error("Error fetching lecture list:", err);
  error = "Error al cargar la lista de lectura";
}
---

<Layout
  title={list ? `${list.name} | Mi Lista de Lectura` : "Lista de Lectura"}
>
  <ListsLayout currentTab="my-lists">
    {
      error && (
        <div class="text-center p-8 bg-red-800 rounded-lg mx-auto my-8 max-w-md">
          <h2 class="text-xl font-bold text-white mb-4">Error</h2>
          <p class="text-gray-300 mb-6">{error}</p>
          <a
            href="/lecture-lists/my-lists"
            class="inline-block px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
          >
            Volver a mis listas
          </a>
        </div>
      )
    }

    {
      list && (
        <div class="mb-8">
          <div class="flex items-center justify-between mb-6">
            <div>
              <h1 class="text-3xl font-bold text-white mb-2">{list.name}</h1>
              <p class="text-gray-300">{list.description}</p>
            </div>
            <div class="flex gap-4">
              <a
                href="/lecture-lists/my-lists"
                class="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors"
              >
                Volver a mis listas
              </a>
            </div>
          </div>

          {books.length === 0 ? (
            <div class="text-center p-8 bg-gray-800 rounded-lg">
              <h2 class="text-xl font-bold text-white mb-4">Lista vacía</h2>
              <p class="text-gray-300 mb-6">
                Esta lista de lectura aún no tiene libros. ¡Agrega algunos para
                comenzar!
              </p>
              <div class="flex flex-wrap gap-4 justify-center">
                <a
                  href="/books"
                  class="inline-block px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
                >
                  Explorar libros
                </a>
              </div>
            </div>
          ) : (
            <div class="mt-6">
              <h2 class="text-xl font-bold text-white mb-4">
                Libros en esta lista (
                <span class="book-count">{books.length}</span>)
              </h2>
              <GridBooks books={books} className="mt-4" />
            </div>
          )}
        </div>
      )
    }
  </ListsLayout>
</Layout>
