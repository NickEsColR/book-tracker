---
import sample from "@/books.json";
import DialogBookForm from "@/components/DialogBookForm.astro";

import GridBooks from "@/components/GridBooks.astro";
import Layout from "@/layouts/Layout.astro";

export const prerender = false;

const { docs: books } = sample;
const genres = Array.from(
  books.reduce((acc, { subject }) => {
    subject.forEach((genre) => acc.add(genre));
    return acc;
  }, new Set<string>())
);
const maxPage = Math.max(
  ...books.map(({ number_of_pages_median }) => number_of_pages_median)
);
const minPage = Math.min(
  ...books.map(({ number_of_pages_median }) => number_of_pages_median)
);

const { request } = Astro;
const { searchParams } = new URL(request.url);
const minPageSelected = searchParams.get("min-pages") || minPage;
const maxPageSelected = searchParams.get("max-pages") || maxPage;
const genreSelected = searchParams.get("genre") || "all";
const filteredBooks = books.filter(
  ({ number_of_pages_median, subject }) =>
    number_of_pages_median >= +minPageSelected &&
    number_of_pages_median <= +maxPageSelected &&
    (genreSelected === "all" || subject.includes(genreSelected))
);
const availableBooks = filteredBooks.length;
---

<Layout>
  <DialogBookForm/>
  <div class="grid grid-cols-1 md:grid-cols-3 md:gap-4 container px-5 mx-auto">
    <section class="col-span-2">
      <GridBooks books={filteredBooks} className="grid-available" showDetails>
        <div
          class="flex flex-col text-center w-full mb-20 col-span-full"
          slot="header"
        >
          <h2
            class="sm:text-3xl text-2xl font-medium title-font mb-4 text-white"
          >
            <span id="number-available" class="font-semibold"
              >{availableBooks}</span
            > Libros Disponibles
          </h2>
          <span class="lg:w-2/3 mx-auto leading-relaxed text-base">
            <span id="number-lecture-list">0</span> en la lista de lectura
          </span>

          <form class="grid md:grid-cols-2 gap-4 mt-8 items-center">
            <div class="flex flex-col xl:flex-row gap-2 items-center">
              <label>Número de páginas</label>
              <div class="flex gap-2">
                <input
                  type="number"
                  id="min-pages"
                  name="min-pages"
                  placeholder="0"
                  class="bg-gray-800 bg-opacity-40 rounded border border-gray-700 text-base outline-none text-white py-1 px-3 w-20"
                  value={minPageSelected}
                />
                -
                <input
                  type="number"
                  id="max-pages"
                  name="max-pages"
                  placeholder="1000"
                  class="bg-gray-800 bg-opacity-40 rounded border border-gray-700 text-base outline-none text-white py-1 px-3 w-20"
                  value={maxPageSelected}
                />
              </div>
            </div>
            <div class="flex flex-col xl:flex-row gap-2 items-center">
              <label> Filtrar por género </label>
              <select
                class="bg-gray-800 bg-opacity-40 rounded border border-gray-700 text-base outline-none text-white py-1 px-3"
                name="genre"
                id="genre"
              >
                <option value="all">Todos</option>
                {
                  genres.map((genre) => (
                    <option value={genre} selected={genre == genreSelected}>
                      {genre}
                    </option>
                  ))
                }
              </select>
            </div>
          </form>
        </div>
      </GridBooks>
    </section>
    <section class="w-full">
      <GridBooks books={[]} className="grid-lecture-list" dropable>
        <h3
          class="sm:text-3xl text-2xl font-medium title-font mb-4 text-white col-span-full"
          slot="header"
        >
          Lista de lectura
        </h3>
      </GridBooks>
    </section>
  </div>
</Layout>

<script>
  const minPagesInput = document.querySelector(
    "#min-pages"
  ) as HTMLInputElement;
  const maxPagesInput = document.querySelector(
    "#max-pages"
  ) as HTMLInputElement;
  const genreInput = document.querySelector("#genre") as HTMLSelectElement;

  genreInput.addEventListener("change", () => {
    const url = new URL(window.location.href);
    url.searchParams.set("genre", genreInput.value);
    //history.pushState({}, "", url.toString());
    window.location.href = url.toString();
  });

  minPagesInput.addEventListener("change", () => {
    const url = new URL(window.location.href);
    url.searchParams.set("min-pages", minPagesInput.value);
    //history.pushState({}, "", url.toString());
    window.location.href = url.toString();
  });

  maxPagesInput.addEventListener("change", () => {
    const url = new URL(window.location.href);
    url.searchParams.set("max-pages", maxPagesInput.value);
    //history.pushState({}, "", url.toString());
    window.location.href = url.toString();
  });
</script>

<script is:inline define:vars={{minPageSelected, maxPageSelected, genreSelected}}>
  const lectureListCount = document.querySelector("#number-lecture-list");
  const availableCount = document.querySelector("#number-available");
  const gridLectureList = document.querySelector(".grid-lecture-list");

  // Get books in locals storage
  const books = JSON.parse(localStorage.getItem("books")) || [];

  // Filter books with query params
  const booksFiltered = books.filter(
    ({ number_of_pages_median, subject }) =>
      number_of_pages_median >= +minPageSelected &&
      number_of_pages_median <= +maxPageSelected &&
      (genreSelected === "all" || subject.includes(genreSelected))
  );

  lectureListCount.textContent = booksFiltered.length;
  availableCount.textContent = availableCount.textContent - booksFiltered.length;

  // Move books from available to lecture list
  booksFiltered.forEach((book) => {
    const card = document.getElementById(book.isbn.join(","));
    const cardClone = card.cloneNode(true);
    cardClone.removeChild(cardClone.querySelector("div"));
    cardClone.removeAttribute("draggable");
    cardClone.removeAttribute("ondragstart");
    cardClone.removeAttribute("ondragend");
    cardClone.classList.add("openDialog");
    cardClone.dataset.book = JSON.stringify(book);

    gridLectureList.appendChild(cardClone);
    card.parentNode.removeChild(card);
  });
</script>